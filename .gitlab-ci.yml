# Author: Daniel J.Mazure
# Date: 05.12.2021
# Description: GitLab CI configuration script.

# Tests over the FPGA set to manual temporarily until one specific machine is devoted
# to that task.
#
# The CI/CD flow generates a bitstream both for the targeted EA.
# The Pipeline can be triggered if there is an update (rule "changes") in the
# ea_url.txt file/folder
# TODO: [Documentation] References are mandatory to exist in the EA included yml

# Include the supported EA configuration files. This could be done in other 
# included file for clarity

include:
  - local: cicd/ea_conf.yml
  - local: support/acme/setup.yml


workflow:
    rules:
        - !reference [.default_rules, rules]
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"
        - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
          when: never  
        - if: $CI_COMMIT_TAG != null 
        - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"
          when: never # Pushing to main doesn't create pipelines unless there is a tag
    

variables: !reference [.setup, variables]


stages:
    - initialization
    - synthesis
    - implementation
    - bitstream
#   - fpga-test
#   - deploy

.clone_ea: &clone_ea 
    # This is a Gitlab CI/CD requirement. Use a token-ed URL instead of the regular one.
    # The load_module script loads the txt file in the support folder.
    # The extract_url script inserts the token into the repo URL.
    - echo "Inserting the Gitlab token in the EA's URL"
    - sh/load_module.sh $EMULATED_ACCELERATOR
    - sh/extract_url.sh ea_url.txt $CI_BUILD_TOKEN


EA-init:
    rules: 
        - !reference [.default_rules, rules]
    tags: !reference [.default_tags, tags]
    stage: initialization
    script:
        - mkdir -p binaries
    artifacts:
          when: always
          paths:
            - binaries

EA-sdk:
        # No matrix for this job. The EA can configure its SDK via 
        # custom scripts
        stage: synthesis
        rules: 
            - when: manual
            - !reference [.default_rules, rules]
        timeout: 4h
        tags: !reference [.default_tags, tags]
        before_script:
            - mkdir -p sdk_output
            - *clone_ea
            - make initialize
        script:
            - !reference [.sdk_default, script]
        after_script:
            - !reference [.sdk_default, after_script]
        artifacts:
          when: always
          paths:
            - binaries

synthesis:
        stage: synthesis
        extends: .common_conf
        parallel: !reference [.multi_target, parallel]
        before_script:
            - *clone_ea
            - ls binaries/
        script:
            - make initialize
            - make $FPGA_BOARD
            - make project
            - make synthesis
        after_script:
            - mkdir -p tmp/project
            - !reference [.synth_default, after_script]
            - cp -r binaries tmp 
            - cp ea_url.txt tmp/EA_info.txt
            - cp shell_build.log tmp/project/
            - cp -r src/system_top.sv tmp/project/
            - cp -r tcl/shell_env.tcl tmp/project/
            - cp gen_system.tcl tmp/project/
            - echo -e "Artifacts:"; ls tmp; ls dcp
            - mv dcp/synthesis.dcp dcp/synthesis_$EA_$FPGA_BOARD
        artifacts:
          when: always
          paths:
            - tmp
            - dcp
            
implementation:
        stage: implementation
        extends: .common_conf
        extends: .implementation_dependencies  
        parallel: !reference [.multi_target, parallel]
        dependencies: !reference [.implementation_dependencies, dependencies]
        # As this is a matrix, rename the corresponding dcp 
        before_script:            
            - mv dcp/synthesis_$EA_FPGA_BOARD dcp/synthesis.dcp
        script:
            - make ci_implementation DCP_ON=false
        after_script:
            - mv dcp/implementation.dcp dcp/implementation_$EA_$FPGA_BOARD
            - echo -e "Artifacts:"; ls dcp; ls reports
            - mv reports reports_$EA_$FPGA_BOARD
        artifacts:
            when: always
            expire_in: 1 day
            paths:
                - dcp
                - reports_$EA_$FPGA_BOARD

bitstream:
        stage: bitstream
        extends: .common_conf        
        extends: .bitstream_dependencies
        parallel: !reference [.multi_target, parallel]
        before_script:
            - mv dcp/implementation_$EA_FPGA_BOARD dcp/implementation.dcp
            - ls dcp/
        script:
            - make ci_bitstream
        after_script:
            - make clean_implementation
            - mv bitstream/system.bit bitstream/system_${EA}_${FPGA_BOARD}.bit
            - echo -e "Artifacts:"; ls bitstream
        artifacts:
            when: always
            expire_in: 1 day
            paths:
                - bitstream        

# reports:
#         stage: bitstream
#         extends: .common_conf
#         extends: .bitstream_dependencies
#         before_script:
#             - mv dcp/implementation_$EA_FPGA_BOARD dcp/implementation.dcp
#             - ls; ls dcp
#         script:
#             - echo "Generate implementation reports..."
#             - make ci_report_route
#             - make validate  
#         after_script:
#             - mv reports reports_$EA_$FPGA_BOARD

#         artifacts:
#             when: always
#             paths:
#                 - reports_$EA_$FPGA_BOARD

# fpga-test:
#         stage: fpga-test
#         retry: 2
#         extends: .common_conf
#         extends: .fpga-test_dependencies
#         # Overwrite tags to select the right board
#         tags: 
#             - $FPGA_BOARD        
#         before_script:
#             - !reference [.fpga_test, before_script]
#             - export FPGA_LOG=fpga_test_${EA}_${FPGA_BOARD}.log
#         script:
#             # The EA script should provide the right script and the right binary
#             - $TOOLS_DIR/fpga/load_bitstream.sh qdma bitstream/system.bit
#             - !reference [.fpga_test, script]
#             - source sh/fpga_test.sh $FPGA_LOG
#             - echo "Checking FPGA log ..."
#             - sh/check_log.sh $FPGA_LOG $VALID_MSG 
#         after_script:
#             - mkdir -p tmp
#             - mv $FPGA_LOG tmp/
#             - !reference [.fpga_test, after_script]
#             - echo -e "Artifacts:"; ls tmp/
#         allow_failure: false
#         artifacts:
#             when: always
#             paths:
#             - tmp

# deploy-EA:
#         stage: deploy
#         extends: .common_conf
#         extends: .fpga-test_dependencies
#         before_script:
#             - export TODAY=$(date +"%y%m%d")            
#             - export EADIRNAME=${TODAY}_${CUSTOM_MSG}
#             - export ABSDIR=$DEPLOY_DIR/$EADIRNAME
#             - mkdir -p $ABSDIR
#         script:
#             - date >> $ABSDIR/date.txt
#             - echo "$CI_COMMIT_SHA" >> $ABSDIR/commit_sha.txt
#             - mv bitstream/system.bit bitstream/$BITSTREAM
#             - mv reports tmp/ ; mv dcp tmp/ ; mv bitstream tmp/
#             - cp -r tmp/* $ABSDIR

