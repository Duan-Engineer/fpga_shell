# Author: Daniel J.Mazure
# Date: 05.12.2021
# Description: GitLab CI configuration script.

# Tests over the FPGA set to manual temporarily until one specific machine is devoted
# to that task.
#
# The CI/CD flow generates a bitstream both for the targeted EA.
# The Pipeline can be triggered if there is an update (rule "changes") in the
# ea_url.txt file/folder

# Include the supported EA configuration files. This could be done in other 
# included file for clarity

include:
  - local: cicd/support.yml

variables: !reference [.setup, variables]


stages:
    - EA-initialization
    - synthesis
    - implementation
    - validation
    - bitstream
    - fpga-test
    - deploy

.clone_ea: &clone_ea 
    # This is a Gitlab CI/CD requirement. Use a token-ed URL instead of the regular one.
    # The load_module script loads the txt file in the support folder.
    # The extract_url script inserts the token into the repo URL.
    - echo "Inserting the Gitlab token in the EA's URL"
    - sh/load_module.sh $EMULATED_ACCELERATOR
    - sh/extract_url.sh ea_url.txt $CI_BUILD_TOKEN

.disable_git:
  extends: .setup
  variables:
    GIT_STRATEGY: none
    GIT_SUBMODULE_STRATEGY: "none"

EA-build:
        stage: EA-initialization
        rules:
            - !reference [.default_rules, rules]
        timeout: 2h
        tags: !reference [.default_tags, tags]
        before_script:
            - *clone_ea 
        script:    
            - make initialize
            - make binaries
        after_script:
            - cp -r accelerator/meep_shell/binaries/* binaries
        artifacts:
                #  untracked: true
          paths:            
            - binaries        

synthesis:
        stage: synthesis
        rules:
            - !reference [.default_rules, rules] 
        needs:
            - EA-build
        timeout: 4h
        tags: !reference [.default_tags, tags]
        before_script:
            - *clone_ea
        script:
            - make initialize
            - make project
            - make synthesis
        after_script:
            - mkdir tmp
            - cp -r src/system_top.sv tmp
            - cp -r tcl/shell_env.tcl tmp
            - cp gen_system.tcl tmp/tcl
        artifacts:
          when: always
          paths:
            - tmp
            - dcp/synthesis.dcp
            
implementation:
        stage: implementation
        rules:
            - !reference [.default_rules, rules] 

        extends: .disable_git

        needs:
            - synthesis
        timeout: 4h
        tags: !reference [.default_tags, tags]
        before_script:
            - echo -e "set g_number_of_jobs $NUMBER_OF_JOBS" >> tcl/environment.tcl
        script:
            - make implementation

        after_script:
            - make clean_synthesis

        dependencies:
            - synthesis

        artifacts:
            when: on_success
            expire_in: 1 day
            paths:
                - dcp/implementation.dcp
                - reports
bitstream:
        stage: bitstream
        rules:
            - !reference [.default_rules, rules] 
        extends: .disable_git
        
        needs:
            - synthesis
            - implementation
        tags: !reference [.default_tags, tags] 
        script:
            - make bitstream
        after_script:
            - make clean_implementation
        dependencies:
            - synthesis
            - implementation
        artifacts:
            when: always
            expire_in: 1 day
            paths:
                - bitstream
validation:
        stage: bitstream
        rules:
            - !reference [.default_rules, rules] 
        extends: .disable_git
        
        needs: 
            - implementation
        tags: !reference [.default_tags, tags] 
        script:
            - echo "Checking implementation reports..." 
            - make validate
        allow_failure: true            
        dependencies:
            - implementation

fpga-test:
        stage: fpga-test
        rules:
            - !reference [.default_rules, rules] 
        extends: .disable_git
        
        needs:
            - EA-build
            - bitstream
        retry: 2
        tags: !reference [.fpga_test, tags]            
        before_script:
            - !reference [.fpga_test, before_script]
        script:
            - sh/load_bitstream.sh qdma tmp/bitstream/$BITSTREAM
            - source sh/fpga_test.sh fpga_test.log                
            # The EA script should provide the right script and the right binary
            - !reference [.fpga_test, script]
            - echo "Checking FPGA log ..."
            - sh/check_log.sh fpga_test.log $VALID_MSG 
        after_script:
            - mv fpga_test.log tmp
        dependencies:
            - EA-build
            - bitstream
        artifacts:
            when: always
            paths:
            - tmp

deploy-EA:
        stage: deploy
        rules:
            - !reference [.default_rules, rules] 
        extends: .disable_git
        tags: !reference [.default_tags, tags]
        before_script:
            - EANAME=$EMULATED_ACCELERATOR ;\
              mkdir -p $DEPLOY_DIR/$(EANAME)_$CI_COMMIT_SHORT_SHA
        script:
            - date >> $DEPLOY_DIR/$(EANAME)_$CI_COMMIT_SHORT_SHA/date.txt
            - mv reports tmp/ ; mv dcp tmp/ ; mv bitstream tmp/
            - cp -r tmp/* $DEPLOY_DIR/$(EANAME)_$CI_COMMIT_SHORT_SHA
        needs:
            - EA-build
            - synthesis
            - implementation
            - bitstream
            - fpga-test
        dependencies:
            - EA-build
            - synthesis
            - implementation
            - bitstream
            - fpga-test



