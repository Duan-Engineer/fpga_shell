# Use this file to configure your system. You can configure your system variables,
# the tags for the runners, the specific scripts for your own EA to work, etc.
# The FPGA board is also defined here [u280, u55c]
# TODO: Do make initialize FPGA_BOARD to set up the proper board within the Shell

.setup:
  variables:
    EMULATED_ACCELERATOR: acme
    GIT_STRATEGY: clone
    GIT_SUBMODULE_STRATEGY: recursive
    DATE: $(date +"%y%m%d")
    CUSTOM_MSG: 1x1_VAS_noVPU
    LINUX_IMAGE: osbi.bin
    SDK_DIR: accelerator/sdk
    # Local workstation Setup
    NUMBER_OF_JOBS: "8"
    BOOT_SCRIPT: /home/tools/fpga-tools/boot_riscv/boot_acme.sh
    SHELL_DEPLOY_DIR: /home/fpga-runnerMEEP/shell_deploy
    CI_RISCV_DIR: /home/tools/openpiton/riscv_install
    # TODO: Link with the SDK repo, set triggering policies. At the moment, We are using the lagarto sdk deploy
    OSBI_DEPLOY_DIR: /home/fpga-runnerMEEP/lagarto_sdk_deploy/rv64gc/230505/osbi_buildroot.bin
    RELEASE_BITSTREAM: system_acme_vpu_u55c.bit
    #Link of Nexus cloud where the bitstreams ofr production will be store.
    MEEP_RAW_REPOSITORY: " https://release.meep-project.eu/nexus/repository/acme-images/"
    # Change this is MEEP wants another bitstream as fixed release
    EA: acme_ea_1h

# Additional information to build the benchmarks
.riscv_benchmarks:
  script:
    # build benchmarks
    - source sh/run_tests.sh setup
    - make test_riscv_fpga
  after_script:
    - mkdir -p tmp/bin_$EA
    - cp -r accelerator/piton/design/chip/tile/vas_tile_core/modules/riscv-tests/benchmarks/*.bin tmp/bin_$EA
    - cp -r accelerator/piton/design/chip/tile/vas_tile_core/modules/riscv-tests/benchmarks/test_list.list tmp/bin_$EA
    - source sh/run_tests.sh set_file tmp/bin_$EA/test_list.list $EA
  artifacts:
    when: always
    paths:
      - tmp/bin

.synth_default:
  after_script:
    - cp $(find . -name "make_project.log") tmp/

# This is OpenPiton dependant, so it is declared here and referenced in the shell yml
.save_dts:
  after_script:
    - mkdir -p tmp/dts; cp $(find . -wholename "*openpiton/*.dts" -type f -print -quit) tmp/dts/${EA}_${FPGA_BOARD}.dts
    - mkdir -p tmp/dts; cp $(find . -wholename "*openpiton/*info.h" -type f -print -quit) tmp/dts/info_${EA}_${FPGA_BOARD}.h

.export_toolchain:
  before_script:
    - echo "Using pre-existing RISCV toolchain"
    - export RISCV=$CI_RISCV_DIR
    # Some scripting-based decision should be added to <sometimes> build the toolchain from scratch (i,e, merge to master branch)
    - echo "RISCV = $RISCV"

.default_tags:
  tags:
    - MEEP_FPGA

.fpga_test:
  before_script:
    - git clone --recurse-submodules https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.bsc.es/meep/FPGA_implementations/AlveoU280/fpga-tools
    - ./fpga-tools/fpga/build_pcie_drivers.sh
  script:
    - ./fpga-tools/boot_riscv/boot_acme.sh $OSBI_DEPLOY_DIR
  after_script:
    - mkdir -p boot
    - cp $BOOT_SCRIPT boot/
    - cp $OSBI_DEPLOY_DIR boot/
    - mv boot tmp/
    - echo -e "Artifacts:"; ls tmp/

.fpga_test_fedora:
  before_script:
    # Download the fedora image and osbi binary
    - curl -o fedora_image.img https://release.meep-project.eu/nexus/repository/acme-images/fs/0.0.20/fedora-33.img
    - curl -O https://release.meep-project.eu/nexus/repository/acme-images/osbi/0.0.20/osbi.bin
    # Prepare the drivers
    - ./fpga-tools/fpga/load-bitstream-onic.sh driverdown


.reports_data:
  after_script:
    - make parse_util_report

# This creates/moves/overwrites the selected bitstream to the specified folder
# This way, MEEP users can grab from here the latest successfull bitstream
.deploy-EA:
  script:
    - mkdir -p $SHELL_DEPLOY_DIR/latest_bitstream
    - cp $ABSDIR/bitstream/$RELEASE_BITSTREAM $SHELL_DEPLOY_DIR/latest_bitstream/
    - echo "$ABSDIR" > $SHELL_DEPLOY_DIR/latest_bitstream/info.txt

.push-to-database:
  script:
    - sh/push2db.sh $ABSDIR/bitstream $ABSDIR/reports/post_route/utilization_hier.txt.csv
